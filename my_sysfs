#include <linux/module.h>
#include <linux/init.h>
#include <linux/kernel.h>
#include <linux/fs.h>
#include <linux/uaccess.h>
#include <linux/kobject.h>
#include <linux/sysfs.h>

#define DEVICE_NAME "my_sysfs"
#define BUF_LEN 1024

static char msg[BUF_LEN];
static int msg_len;
static struct kobject *my_kobject;

// Sysfs show method
static ssize_t msg_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
{
    return sprintf(buf, "%s", msg);
}

// Sysfs store method
static ssize_t msg_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
{
    if (count >= BUF_LEN)
        return -EINVAL;

    memcpy(msg, buf, count);
    msg[count] = '\0'; // Ensure null-termination
    msg_len = count;

    return count;
}

// Declare the sysfs attributes
static struct kobj_attribute msg_attribute = __ATTR(msg, 0664, msg_show, msg_store);

static int __init my_sysfs_device_init(void)
{
    int result;

    // Create a kobject and add it to the sysfs
    my_kobject = kobject_create_and_add(DEVICE_NAME, kernel_kobj);
    if (!my_kobject)
        return -ENOMEM;

    // Create the files associated with this kobject
    result = sysfs_create_file(my_kobject, &msg_attribute.attr);
    if (result) {
        kobject_put(my_kobject);
        return result;
    }

    printk(KERN_INFO "Sysfs device created successfully\n");
    return 0;
}

static void __exit my_sysfs_device_exit(void)
{
    kobject_put(my_kobject);
    printk(KERN_INFO "Sysfs device removed successfully\n");
}

module_init(my_sysfs_device_init);
module_exit(my_sysfs_device_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("FEODOR");
MODULE_DESCRIPTION("Character device for user-kernel communication using sysfs");
